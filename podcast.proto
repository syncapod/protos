syntax = "proto3";
package protos;

import "google/protobuf/timestamp.proto";
import "user.proto";

option go_package = ".;protos";

message Image {
    string title = 1;
    string url = 2;
}

message Category {
    string text = 1;
    repeated Category category = 2;
}

message Podcast {
    string id = 1; 
    string title = 2;
    string author = 3;
    bool episodic = 4;
    string summary = 5;
    string link = 6;
    Image image = 7;
    string explicit = 8;
    string language = 9;
    repeated string Keywords = 10;
    repeated Category category = 11;
    google.protobuf.Timestamp pubDate = 12;
    google.protobuf.Timestamp lastBuildDate = 13;
    string rss = 14;
}

message Episode {
    string id = 1;
    string podcastID = 2;
    string title = 3;
	string author = 4;
    string episodeType = 5; // values are full,trailer,bonus
    Image image = 6;
    google.protobuf.Timestamp pubDate = 7;
    string description = 8;
    string summary = 9;
    int32 season = 10;
    int32 episode = 11;
//	repeated Category category = 12;
    string explicit = 13;
    string MP3URL = 14;
    int64 durationMillis = 15;
    string subtitle = 16;
    string encoded = 17;
}

// (PodcastService)

message GetPodReq {
    string id = 1;
}

// start & end represent the amount of episodes to return
message Request {
    //string token = 1;
    string podcastID = 2;
    string episodeID = 3;
    int64 start = 4;
    int64 end = 5;
}

message GetEpiReq {
    string id = 1;
    int64 start = 2;
    int64 end = 3;
}

message GetUserEpiReq {
    string epiID = 1;
}

message GetSubReq { }

message GetUserLastPlayedReq { }

message Response {
    bool success = 1;
    string message = 2;
}

message LastPlayedRes {
    Podcast podcast = 1;
    Episode episode = 2;
    int64 millis = 3;
}

message Subscriptions {
    repeated Subscription subscriptions = 1;
}

message Episodes {
    repeated Episode episodes = 1;
}

service Pod {
    // Podcast and Episodes
    rpc GetPodcast(GetPodReq) returns (Podcast) { }
    rpc GetEpisodes(GetEpiReq) returns (Episodes) { }

    // UserEpisode
    rpc GetUserEpisode(GetUserEpiReq) returns (UserEpisode) { }
    rpc UpsertUserEpisode(UserEpisode) returns (Response) { }

    // Subscriptions
    rpc GetSubscriptions(GetSubReq) returns (Subscriptions) { }
    /* rpc UpsertSubscription(Subscription) returns (Response) { } */

    // Misc.
    rpc GetUserLastPlayed(GetUserLastPlayedReq) returns (LastPlayedRes) { }
}
